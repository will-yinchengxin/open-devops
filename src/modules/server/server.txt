    //{
	//	// 处理信号退出的handler
	//	term := make(chan os.Signal, 1)
	//	signal.Notify(term, os.Interrupt, syscall.SIGTERM)
	//	cancelC := make(chan struct{})
	//	g.Add(
	//		func() error {
	//			select {
	//			case <-term:
	//				level.Warn(logger).Log("msg", "Receive SIGTERM ,exiting gracefully....")
	//				cancelAll()
	//				return nil
	//			case <-cancelC:
	//				level.Warn(logger).Log("msg", "other cancel exiting")
	//				return nil
	//			}
	//		},
	//		func(err error) {
	//			close(cancelC)
	//		},
	//	)
	//}
	// 测试模块
	//{
	//	g.Add(func() error {
	//		for {
	//			ticker := time.NewTicker(5 * time.Second)
	//			select {
	//			case <-ctxAll.Done():
	//				level.Warn(logger).Log("msg", "我是模块01退出了，接收到了cancelall")
	//				return nil
	//			case <-ticker.C:
	//				level.Warn(logger).Log("msg", "我是模块01")
	//			}
	//		}
	//	}, func(err error) {}, )
	//}